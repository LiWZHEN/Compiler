=== Test Case: basic2 ===
Expected Verdict: Fail
Comment: basic test, type mismatch in if expression - string vs i32
Input code:
/*
Test Package: Semantic-1
Test Target: basic
Author: Wenxin Zheng
Time: 2025-08-08
Verdict: Fail
Comment: basic test, type mismatch in if expression - string vs i32
*/

fn main() {
    let a: i32 = 10;
    let b: i32 = 20;
    let operator: Op = pick_operator(a);
    let result: i32 = if (operator == Op::Add) {
        compute(a, b, Op::Add)
    } else {
        compute(a, b, Op::Sub)
    };
    let doubled: i32 = result * 2;
    let mut acc: i32 = 0;
    let mut i: i32 = 0;
    while (i < doubled) {
        acc += i;
        i += 1;
    }
    let final_score: i32 = acc / 3;
    exit(0);
}

enum Op {
    Add,
    Sub,
}

fn pick_operator(value: i32) -> Op {
    if (value > 5) {
        Op::Add
    } else {
        Op::Sub
    }
}

fn compute(x: i32, y: i32, op: Op) -> i32 {
    let mut accumulator: i32 = 0;
    let mut i: i32 = 0;
    while (i < y) {
        accumulator = accumulator + x + i;
        i += 1;
    }
    if (op == Op::Add) {
        accumulator + y
    } else {
        "invalid"
    }
}

struct Dummy {
    field_one: i32,
    field_two: bool,
}

impl Dummy {
    fn new() -> Self {
        Dummy {
            field_one: 0,
            field_two: false,
        }
    }
}


Expression: line 13 column 37: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 13 column 39: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 14 column 36: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 14 column 46: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 15 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 15 column 16: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 15 column 18: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 15 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 15 column 30: Expect "{".
Expression: Successfully handle the struct expression try failure.
ExpressionStatement: line 16 column 5: Expect ";".
Expression: line 15 column 16: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 15 column 18: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 15 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 15 column 30: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 17 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 17 column 16: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 17 column 18: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 17 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 17 column 30: Expect "{".
Expression: Successfully handle the struct expression try failure.
ExpressionStatement: line 18 column 5: Expect ";".
Expression: line 17 column 16: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 17 column 18: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 17 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 17 column 30: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 19 column 31: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 22 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 22 column 14: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 22 column 23: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 23 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 23 column 13: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 23 column 17: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 24 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 24 column 11: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 25 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 25 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 25 column 5: Expect identifier or keyword.
PathExprSegment: line 25 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 25 column 5: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Expression: line 26 column 32: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 27 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 27 column 9: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 28 column 1: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 28 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 28 column 1: Expect identifier or keyword.
PathExprSegment: line 28 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 28 column 1: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
ShorthandSelf: line 35 column 18: Expect "self".
FunctionParameters: Successfully handle the failure.
Item: line 36 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 36 column 15: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 37 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 38 column 5: Expect "{".
Expression: Successfully handle the struct expression try failure.
ExpressionStatement: line 38 column 5: Expect ";".
Expression: line 38 column 5: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 39 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 40 column 5: Expect "{".
Expression: Successfully handle the struct expression try failure.
ExpressionStatement: line 40 column 5: Expect ";".
Expression: line 40 column 5: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 41 column 1: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 41 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 41 column 1: Expect identifier or keyword.
PathExprSegment: line 41 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 41 column 1: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
ShorthandSelf: line 43 column 12: Expect "self".
FunctionParameters: Successfully handle the failure.
Item: line 46 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 46 column 14: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 46 column 17: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 47 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 47 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 47 column 35: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 47 column 39: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 47 column 42: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 48 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 48 column 11: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 49 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 49 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 49 column 5: Expect identifier or keyword.
PathExprSegment: line 49 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 49 column 5: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 50 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 50 column 12: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 50 column 22: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 51 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 51 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 52 column 5: Expect "{".
Expression: Successfully handle the struct expression try failure.
ExpressionStatement: line 52 column 5: Expect ";".
Expression: line 51 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 52 column 5: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 53 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
ExpressionStatement: line 54 column 5: Expect ";".
Item: line 55 column 1: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 55 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 55 column 1: Expect identifier or keyword.
PathExprSegment: line 55 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 55 column 1: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
StructField: line 60 column 1: Expect Identifier.
StructFields: Successfully handle the struct field trying failure.
Item: line 64 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
StructExprField: line 67 column 9: Expect Identifier.
StructExprFields: Successfully handle expression try failure.
ExpressionStatement: line 68 column 5: Expect ";".
StructExprField: line 67 column 9: Expect Identifier.
StructExprFields: Successfully handle expression try failure.
Error in value_type check: Type mismatch.
[basic2] Semantic analysis failed
Actual result: FAIL
✓ TEST PASSED: Expected Fail, got Fail
Final result: PASS
