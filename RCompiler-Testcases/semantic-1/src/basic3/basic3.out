=== Test Case: basic3 ===
Expected Verdict: Fail
Comment: basic test, variable shadowing and mutability error
Input code:
/*
Test Package: Semantic-1
Test Target: basic
Author: Wenxin Zheng
Time: 2025-08-08
Verdict: Fail
Comment: basic test, variable shadowing and mutability error
*/

fn main() {
    let mut numbers: [i32; 7] = [1, 2, 3, 4, 5, 6, 7];
    let length: usize = numbers.len();
    let mut index: usize = 0;
    while (index < length) {
        let index: usize = index;
        numbers[index] = numbers[index] * 2;
        index += 1;
    }

    let total: i32 = sum_array(&numbers);
    let mut temp: i32 = total;
    loop {
        if (temp == 0) {
            break;
        }
        temp -= 1;
    }
    let done: i32 = temp;
    exit(0);
}

fn sum_array(slice: &[i32; 7]) -> i32 {
    let mut subtotal: i32 = 0;
    let mut i: usize = 0;
    while (i < slice.len()) {
        subtotal += slice[i];
        i += 1;
    }
    subtotal
}


Expression: line 12 column 32: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 12 column 36: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 14 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 14 column 18: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 14 column 26: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 15 column 33: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 16 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 16 column 16: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 16 column 22: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 16 column 33: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 16 column 39: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 17 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 17 column 15: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 18 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 18 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 18 column 5: Expect identifier or keyword.
PathExprSegment: line 18 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 18 column 5: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Expression: line 20 column 31: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 20 column 40: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 21 column 30: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 22 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Item: line 23 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 23 column 18: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 24 column 13: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 24 column 18: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 24 column 18: Expect identifier or keyword.
BreakExpr: Successfully handle expression try failure.
Item: line 25 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 25 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 25 column 9: Expect identifier or keyword.
PathExprSegment: line 25 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 25 column 9: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 26 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 26 column 14: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 27 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 27 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 27 column 5: Expect identifier or keyword.
PathExprSegment: line 27 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 27 column 5: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Expression: line 28 column 25: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 29 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 29 column 9: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 30 column 1: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 30 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 30 column 1: Expect identifier or keyword.
PathExprSegment: line 30 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 30 column 1: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
ShorthandSelf: line 32 column 14: Expect "self".
FunctionParameters: Successfully handle the failure.
Item: line 35 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 35 column 14: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 35 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 35 column 25: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 36 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 36 column 18: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 36 column 26: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 36 column 28: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 37 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 37 column 11: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 38 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 38 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 38 column 5: Expect identifier or keyword.
PathExprSegment: line 38 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 38 column 5: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 39 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 40 column 1: Expect "{".
Expression: Successfully handle the struct expression try failure.
ExpressionStatement: line 40 column 1: Expect ";".
Expression: line 40 column 1: Expect "{".
Expression: Successfully handle the struct expression try failure.
Error in value_type check: Type mismatch.
[basic3] Semantic analysis failed
Actual result: FAIL
âœ“ TEST PASSED: Expected Fail, got Fail
Final result: PASS
