=== Test Case: basic6 ===
Expected Verdict: Fail
Comment: basic test, invalid break syntax with labeled break
Input code:
/*
Test Package: Semantic-1
Test Target: basic
Author: Wenxin Zheng
Time: 2025-08-08
Verdict: Fail
Comment: basic test, invalid break syntax with labeled break
*/

fn main() {
    let steps: i32 = 7;
    let total: i32 = climb(steps);
    let marker: i32 = total;
    exit(0);
}

fn climb(n: i32) -> i32 {
    if (n <= 1) {
        return 1;
    }
    let mut ways: i32 = 0;
    let mut first: i32 = 1;
    let mut second: i32 = 1;
    let mut i: i32 = 2;
    while (i <= n) {
        let next: i32 = first + second;
        first = second;
        second = next;
        ways = next;
        i += 1;
    }
    break ways;
}


Expression: line 12 column 27: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 12 column 33: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 13 column 28: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 14 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 14 column 9: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 15 column 1: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 15 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 15 column 1: Expect identifier or keyword.
PathExprSegment: line 15 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 15 column 1: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
ShorthandSelf: line 17 column 10: Expect "self".
FunctionParameters: Successfully handle the failure.
Item: line 18 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 18 column 11: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 19 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Item: line 20 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 20 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 20 column 5: Expect identifier or keyword.
PathExprSegment: line 20 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 20 column 5: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 25 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 25 column 14: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 25 column 18: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 26 column 31: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 26 column 39: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 27 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 27 column 15: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 27 column 23: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 28 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 28 column 16: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 28 column 22: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 29 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 29 column 14: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 29 column 20: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 30 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 30 column 11: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 31 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 31 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 31 column 5: Expect identifier or keyword.
PathExprSegment: line 31 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 31 column 5: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 32 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 32 column 15: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 33 column 1: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 33 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 33 column 1: Expect identifier or keyword.
PathExprSegment: line 33 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 33 column 1: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Error in value_type check: Type mismatch.
[basic6] Semantic analysis failed
Actual result: FAIL
âœ“ TEST PASSED: Expected Fail, got Fail
Final result: PASS
