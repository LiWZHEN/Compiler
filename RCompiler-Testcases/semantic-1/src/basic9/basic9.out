=== Test Case: basic9 ===
Expected Verdict: Fail
Comment: basic test, type mismatch in type implementation - i32 vs bool
Input code:
/*
Test Package: Semantic-1
Test Target: basic
Author: Wenxin Zheng
Time: 2025-08-08
Verdict: Fail
Comment: basic test, type mismatch in type implementation - i32 vs bool
*/

fn main() {
    let mut board: Board = Board::new();
    let mut turn: usize = 0;
    while (turn < 9) {
        let row: usize = turn / 3;
        let col: usize = turn % 3;
        board.place(row, col, if (turn % 2 == 0) { Cell::X } else { Cell::O });
        turn += 1;
    }
    let outcome: Cell = board.winner();
    let holder: Cell = outcome;
    exit(0);
}

// #[derive(PartialEq, Copy, Clone)] // enum implicitly implements PartialEq, Copy, Clone
enum Cell {
    Empty,
    X,
    O,
}

struct Board {
    cells: [[Cell; 3]; 3],
}

impl Board {
    fn new() -> Self {
        Board {
            cells: [
                [Cell::Empty, Cell::Empty, Cell::Empty],
                [Cell::Empty, Cell::Empty, Cell::Empty],
                [Cell::Empty, Cell::Empty, Cell::Empty],
            ],
        }
    }

    fn place(&mut self, r: usize, c: usize, value: Cell) {
        self.cells[r][c] = value
    }

    fn winner(&self) -> Cell {
        let mut i: usize = 0;
        while (i < 3) {
            if (self.line_equal(self.cells[i][0], self.cells[i][1], self.cells[i][2])) {
                return self.cells[i][0];
            }
            if (self.line_equal(self.cells[0][i], self.cells[1][i], self.cells[2][i])) {
                return self.cells[0][i];
            }
            i += 1;
        }
        if (self.line_equal(self.cells[0][0], self.cells[1][1], self.cells[2][2])) {
            return self.cells[0][0];
        }
        if (self.line_equal(self.cells[0][2], self.cells[1][1], self.cells[2][0])) {
            return self.cells[0][2];
        }
        Cell::Empty
    }

    fn line_equal(&self, a: Cell, b: Cell, c: Cell) -> bool {
        if (a == Cell::X && b == Cell::X && c == Cell::X) {
            return 1;
        }
        if (a == Cell::O && b == Cell::O && c == Cell::O) {
            return 1;
        }
        0
    }
}


Expression: line 11 column 38: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 13 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 13 column 17: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 14 column 31: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 15 column 31: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 16 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 16 column 14: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 16 column 20: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 16 column 24: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 16 column 29: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 16 column 40: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 16 column 52: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 16 column 60: Expect "{".
Expression: Successfully handle the struct expression try failure.
ExpressionStatement: line 16 column 60: Expect ";".
Expression: line 16 column 60: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 16 column 69: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 16 column 77: Expect "{".
Expression: Successfully handle the struct expression try failure.
ExpressionStatement: line 16 column 77: Expect ";".
Expression: line 16 column 77: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 17 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 17 column 14: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 18 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 18 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 18 column 5: Expect identifier or keyword.
PathExprSegment: line 18 column 5: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 18 column 5: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Expression: line 19 column 30: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 19 column 37: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 20 column 31: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 21 column 5: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 21 column 9: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 22 column 1: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 22 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 22 column 1: Expect identifier or keyword.
PathExprSegment: line 22 column 1: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 22 column 1: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
StructField: line 33 column 1: Expect Identifier.
StructFields: Successfully handle the struct field trying failure.
Item: line 37 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 39 column 29: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 39 column 42: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 39 column 55: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 40 column 29: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 40 column 42: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 40 column 55: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 41 column 29: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 41 column 42: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 41 column 55: Expect "{".
Expression: Successfully handle the struct expression try failure.
StructExprField: line 43 column 9: Expect Identifier.
StructExprFields: Successfully handle expression try failure.
ExpressionStatement: line 44 column 5: Expect ";".
Expression: line 39 column 29: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 39 column 42: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 39 column 55: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 40 column 29: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 40 column 42: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 40 column 55: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 41 column 29: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 41 column 42: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 41 column 55: Expect "{".
Expression: Successfully handle the struct expression try failure.
StructExprField: line 43 column 9: Expect Identifier.
StructExprFields: Successfully handle expression try failure.
Item: line 47 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 47 column 13: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 47 column 19: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 47 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 47 column 24: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 48 column 5: Expect "{".
Expression: Successfully handle the struct expression try failure.
ExpressionStatement: line 48 column 5: Expect ";".
Expression: line 47 column 13: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 47 column 19: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 47 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 47 column 24: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 48 column 5: Expect "{".
Expression: Successfully handle the struct expression try failure.
FunctionParameters: line 50 column 20: Expect ",".
FunctionParameters: Successfully handle the failure.
Identifier: line 50 column 16: Expect identifier.
FunctionParameters: Successfully handle the failure.
Item: line 52 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 52 column 18: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 53 column 13: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 53 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 53 column 32: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 53 column 37: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 53 column 43: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 53 column 45: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 53 column 55: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 53 column 61: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 53 column 63: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 53 column 73: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 53 column 79: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 53 column 81: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 54 column 17: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 54 column 28: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 54 column 34: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 54 column 36: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 55 column 13: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 55 column 13: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 55 column 13: Expect identifier or keyword.
PathExprSegment: line 55 column 13: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 55 column 13: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 56 column 13: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 56 column 21: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 56 column 32: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 56 column 37: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 56 column 43: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 56 column 48: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 56 column 55: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 56 column 61: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 56 column 66: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 56 column 73: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 56 column 79: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 56 column 84: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 57 column 17: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 57 column 28: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 57 column 34: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 57 column 39: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 58 column 13: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 58 column 13: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 58 column 13: Expect identifier or keyword.
PathExprSegment: line 58 column 13: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 58 column 13: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 59 column 13: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 59 column 15: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 60 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 60 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 60 column 9: Expect identifier or keyword.
PathExprSegment: line 60 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 60 column 9: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 61 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 61 column 17: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 61 column 28: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 61 column 33: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 61 column 39: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 61 column 51: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 61 column 57: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 61 column 69: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 61 column 75: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 62 column 13: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 62 column 24: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 62 column 30: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 63 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 63 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 63 column 9: Expect identifier or keyword.
PathExprSegment: line 63 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 63 column 9: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 64 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 64 column 17: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 64 column 28: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 64 column 33: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 64 column 39: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 64 column 51: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 64 column 57: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 64 column 69: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 64 column 75: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 65 column 13: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 65 column 24: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 65 column 30: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 66 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 66 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 66 column 9: Expect identifier or keyword.
PathExprSegment: line 66 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 66 column 9: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 67 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 68 column 5: Expect "{".
Expression: Successfully handle the struct expression try failure.
ExpressionStatement: line 68 column 5: Expect ";".
Expression: line 68 column 5: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 71 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 71 column 15: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 71 column 26: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 71 column 31: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 71 column 42: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 71 column 47: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 71 column 57: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 72 column 13: Invalid keyword!
Statement: Successfully handle the item try failure.
Item: line 73 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 73 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 73 column 9: Expect identifier or keyword.
PathExprSegment: line 73 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 73 column 9: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 74 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
Expression: line 74 column 15: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 74 column 26: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 74 column 31: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 74 column 42: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 74 column 47: Expect "{".
Expression: Successfully handle the struct expression try failure.
Expression: line 74 column 57: Expect "{".
Expression: Successfully handle the struct expression try failure.
Item: line 75 column 13: Invalid keyword!
Statement: Successfully handle the item try failure.
Item: line 76 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
PathExprSegment: line 76 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 76 column 9: Expect identifier or keyword.
PathExprSegment: line 76 column 9: Expect identifier or keyword.
Expression: Successfully handle the struct expression try failure.
PathExprSegment: line 76 column 9: Expect identifier or keyword.
Statements: Successfully handle the expression without block try failure.
Item: line 77 column 9: Invalid keyword!
Statement: Successfully handle the item try failure.
ExpressionStatement: line 78 column 5: Expect ";".
